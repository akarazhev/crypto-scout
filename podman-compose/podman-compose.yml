version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: crypto-scout-mq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
      - "5552:5552"   # Stream protocol
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - crypto-scout
    environment:
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/rabbitmq_user
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/rabbitmq_pass
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648 -rabbit vm_memory_high_watermark 0.6
      # To enable TLS, uncomment and provide certs:
      # - RABBITMQ_SSL_CACERTFILE=/certs/ca_certificate.pem
      # - RABBITMQ_SSL_CERTFILE=/certs/server_certificate.pem
      # - RABBITMQ_SSL_KEYFILE=/certs/server_key.pem
      # - RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=true
      # - RABBITMQ_SSL_VERIFY=verify_peer
    secrets:
      - rabbitmq_user
      - rabbitmq_pass
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres:
    image: postgres:13
    container_name: crypto-scout-db
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-scout
    environment:
      - POSTGRES_DB=cryptoscout
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=sa
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sa -d cryptoscout" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  event-collector:
    build:
      context: ../event-collector
      dockerfile: Dockerfile
    container_name: crypto-scout-event-collector
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - crypto-scout
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME_FILE=/run/secrets/rabbitmq_user
      - SPRING_RABBITMQ_PASSWORD_FILE=/run/secrets/rabbitmq_pass
      - SPRING_RABBITMQ_CONNECTION_TIMEOUT=5000
      - SPRING_RABBITMQ_STREAM_ENABLED=true
      - SPRING_RABBITMQ_STREAM_HOST=rabbitmq
      - SPRING_RABBITMQ_STREAM_PORT=5552
      - SPRING_RABBITMQ_PUBLISHER_CONFIRMS=true
      - SPRING_RABBITMQ_TEMPLATE_EXCHANGE=crypto.events
      - SPRING_RABBITMQ_TEMPLATE_ROUTING_KEY=crypto.price.update
      - SPRING_RABBITMQ_STREAM_NAME=crypto.price.stream
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/cryptoscout
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=sa
    secrets:
      - rabbitmq_user
      - rabbitmq_pass
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && java -jar event-collector.jar" ]
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 512M

  crypto-scout-client:
    build:
      context: ../crypto-scout-client
      dockerfile: Dockerfile
    container_name: crypto-scout-client
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-scout
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME_FILE=/run/secrets/rabbitmq_user
      - SPRING_RABBITMQ_PASSWORD_FILE=/run/secrets/rabbitmq_pass
      - SPRING_RABBITMQ_CONNECTION_TIMEOUT=5000
      # Client-specific settings
      - CLIENT_CONNECT_TIMEOUT_MS=10000
      # CoinMarketCap settings
      - CMC_CONNECT_TIMEOUT_MS=10000
      - CMC_FETCH_INTERVAL_MS=600000
      - CMC_CIRCUIT_BREAKER_THRESHOLD=5
      - CMC_CIRCUIT_BREAKER_TIMEOUT_MS=30000
      - CMC_RATE_LIMIT_MS=2100
      - CMC_RETRY_BASE_MS=1000
      - CMC_RETRY_MAX_MS=60000
      - CMC_RETRY_JITTER=0.2
      # RabbitMQ settings
      - AMQP_EXCHANGE_METRICS=metrics-exchange
      - AMQP_QUEUE_CMC_FEAR_GREED_INDEX=metrics-cmc-fear-greed-index-queue
      - AMQP_QUEUE_BYBIT_LAUNCH_POOL=metrics-bybit-launch-pool-queue
      - AMQP_QUEUE_DEAD=metrics-dead-letter-queue
      - AMQP_QUEUE_CLIENT=crypto-scout-client-queue
      - AMQP_QUEUE_TTL_MS=21600000
      - AMQP_QUEUE_MAX_LENGTH=2500
      # Stream settings
      - SPRING_RABBITMQ_STREAM_ENABLED=true
      - SPRING_RABBITMQ_STREAM_HOST=rabbitmq
      - SPRING_RABBITMQ_STREAM_PORT=5552
      - SPRING_RABBITMQ_LISTENER_SIMPLE_CONCURRENCY=5
      - SPRING_RABBITMQ_LISTENER_SIMPLE_MAX_CONCURRENCY=10
      - SPRING_RABBITMQ_LISTENER_SIMPLE_PREFETCH=10
    secrets:
      - rabbitmq_user
      - rabbitmq_pass
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && java -jar crypto-scout-client.jar" ]
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 512M

  telegram-bot:
    build:
      context: ../telegram-bot
      dockerfile: Dockerfile
    container_name: crypto-scout-telegram-bot
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-scout
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME_FILE=/run/secrets/rabbitmq_user
      - SPRING_RABBITMQ_PASSWORD_FILE=/run/secrets/rabbitmq_pass
      - SPRING_RABBITMQ_CONNECTION_TIMEOUT=5000
      - SPRING_RABBITMQ_LISTENER_SIMPLE_CONCURRENCY=3
      - SPRING_RABBITMQ_LISTENER_SIMPLE_MAX_CONCURRENCY=5
      - SPRING_RABBITMQ_LISTENER_SIMPLE_PREFETCH=10
      - SPRING_RABBITMQ_TEMPLATE_EXCHANGE=service.events
      - SPRING_RABBITMQ_TEMPLATE_ROUTING_KEY=service.command.telegram
      - SPRING_RABBITMQ_TEMPLATE_QUEUE=service.commands
      - SPRING_RABBITMQ_LISTENER_QUEUES=service.notifications
    secrets:
      - rabbitmq_user
      - rabbitmq_pass
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && java -jar telegram-bot.jar" ]
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 512M

secrets:
  rabbitmq_user:
    file: ./rabbitmq/rabbitmq_user
  rabbitmq_pass:
    file: ./rabbitmq/rabbitmq_pass

networks:
  crypto-scout: