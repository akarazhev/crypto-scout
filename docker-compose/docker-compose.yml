# MIT License
#
# Copyright (c) 2025 Andrey Karazhev
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: crypto-scout-mq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "./data/rabbitmq:/var/lib/rabbitmq"
    networks:
      - crypto-scout
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cex-client:
    build:
      context: ../cex-client
      dockerfile: Dockerfile
    container_name: crypto-scout-cex-client
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-scout
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_CONNECTION_TIMEOUT=5000
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && java -jar cex-client.jar" ]

  postgres:
    image: postgres:13
    container_name: crypto-scout-db
    ports:
      - "5432:5432"
    volumes:
      - "./data/postgres:/var/lib/postgresql/data"
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql"
    networks:
      - crypto-scout
    environment:
      - POSTGRES_DB=cryptoscout
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD=sa
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sa -d cryptoscout" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  event-collector:
    build:
      context: ../event-collector
      dockerfile: Dockerfile
    container_name: crypto-scout-event-collector
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - crypto-scout
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_CONNECTION_TIMEOUT=5000
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/cryptoscout
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=sa
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && java -jar event-collector.jar" ]

networks:
  crypto-scout:
    driver: bridge